/*
 * User Management
 *
 * This is the specification of the User Management service
 *
 * API version: 1.0.0
 * Contact: y.buryburymski@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package data

import (
	"encoding/json"
	"fmt"
	"io"
	"time"
)

type User struct {
	// unique identifier
	Id int `json:"id"`
	// Hyperlink reference
	Href string `json:"href"`
	// The current status of User on this position
	Status string `json:"status"`
	// Date and time of the user creation (timestamp)
	CreationDate time.Time `json:"creationDate"`
	// Date and time of the user last update (timestamp)
	LastUpdate time.Time `json:"lastUpdate"`
	// Effective from date and time of the user history record (timestamp)
	FromDate time.Time `json:"fromDate,omitempty"`
	// Effective to date and time of the user history record (timestamp)
	ToDate time.Time `json:"toDate,omitempty"`
	// Name prefix, f.e. Mrs., Mr., etc.
	NamePrefix string `json:"namePrefix,omitempty"`
	// Given name or the first name
	GivenName string `json:"givenName"`
	// Middle name
	MiddleName string `json:"middleName,omitempty"`
	// Family name or surname, the second name
	FamilyName string `json:"familyName"`
	// Nickname associated to this user
	Nickname string `json:"nickname,omitempty"`
	// e-mail address
	EMailAddress string `json:"eMailAddress"`
	// Work phone number
	WorkPhone string `json:"workPhone,omitempty"`
	// Private phone number
	PrivatePhone string `json:"privatePhone,omitempty"`
	// Private web site
	WebHomePage string `json:"webHomePage,omitempty"`
}

type UserAdd struct {
	// Name prefix, f.e. Mrs., Mr., etc.
	NamePrefix string `json:"namePrefix,omitempty"`
	// Given name or the first name
	GivenName string `json:"givenName"`
	// Middle name
	MiddleName string `json:"middleName,omitempty"`
	// Family name or surname, the second name
	FamilyName string `json:"familyName"`
	// Nickname associated to this user
	Nickname string `json:"nickname"`
	// e-mail address
	EMailAddress string `json:"eMailAddress"`
	// Work phone number
	WorkPhone string `json:"workPhone,omitempty"`
	// Private phone number
	PrivatePhone string `json:"privatePhone,omitempty"`
	// Private web site
	WebHomePage string `json:"webHomePage,omitempty"`
}

type UserUpdate struct {
	// Name prefix, f.e. Mrs., Mr., etc.
	NamePrefix string `json:"namePrefix,omitempty"`
	// Given name or the first name
	GivenName string `json:"givenName,omitempty"`
	// Middle name
	MiddleName string `json:"middleName,omitempty"`
	// Family name or surname, the second name
	FamilyName string `json:"familyName,omitempty"`
	// Nickname associated to this user
	Nickname string `json:"nickname,omitempty"`
	// e-mail address
	EMailAddress string `json:"eMailAddress,omitempty"`
	// Work phone number
	WorkPhone string `json:"workPhone,omitempty"`
	// Private phone number
	PrivatePhone string `json:"privatePhone,omitempty"`
	// Private web site
	WebHomePage string `json:"webHomePage,omitempty"`
}

type ModelError struct {
	// Application relevant detail, defined in the API or a common list.
	Code string `json:"code"`
	// More details and corrective actions related to the error which can be shown to a client user.
	Message string `json:"message"`
}


// ///////////////////////////////////////////////////////////
func (u *UserAdd) FromJSON(r io.Reader) error {
	e := json.NewDecoder(r)
	return e.Decode(u)
}

// ///////////////////////////////////////////////////////////
func (u *UserUpdate) FromJSON(r io.Reader) error {
	e := json.NewDecoder(r)
	return e.Decode(u)
}

// Users is a collection of User
type Users []*User

// ToJSON serializes the contents of the collection to JSON
// NewEncoder provides better performance than json.Unmarshal as it does not
// have to buffer the output into an in memory slice of bytes
// this reduces allocations and the overheads of the service
//
// https://golang.org/pkg/encoding/json/#NewEncoder
func (u *Users) ToJSON(w io.Writer) error {
	e := json.NewEncoder(w)
	return e.Encode(u)
}

func (u User) ToJSON(w io.Writer) error {
	e := json.NewEncoder(w)
	return e.Encode(u)
}

// GetUsers returns a list of users
func GetUsers() Users {
	return userList
}

// GetUser returns the users
func GetUser(id int) *User {
	usr, _, _ := findUser(id)
	return usr
}

func AddUser(u *UserAdd) {
	var ni int = getNextID()
	uf := &User{
		ni,
		string(ni),
		"A",
		time.Now().UTC(),
		time.Now().UTC(),
		time.Now().UTC(),
		time.Now().UTC(),
		u.NamePrefix,
		u.GivenName,
		u.MiddleName,
		u.FamilyName,
		u.Nickname,
		u.EMailAddress,
		u.WorkPhone,
		u.PrivatePhone,
		u.WebHomePage,
	}

	userList = append(userList, uf)
}

func UpdateUser(id int, u *UserUpdate) error {
	_, pos, err := findUser(id)
	if err != nil {
		return err
	}

	//	u.ID = id

	uf := &User{
		id,
		string(id),
		"U",
		time.Now().UTC(),
		time.Now().UTC(),
		time.Now().UTC(),
		time.Now().UTC(),
		u.NamePrefix,
		u.GivenName,
		u.MiddleName,
		u.FamilyName,
		u.Nickname,
		u.EMailAddress,
		u.WorkPhone,
		u.PrivatePhone,
		u.WebHomePage,
	}

	userList[pos] = uf

	return nil
}

func DeleteUser(id int) error {
	_, pos, err := findUser(id)
	if err != nil {
		return err
	}

	// Remove the element at index pos from userList
	// Variant 1
	userList = append(userList[:pos], userList[pos+1:]...)

	// Variant 2
	//userList[pos] = userList[len(userList)-1] // Copy last element to index id
	//userList[len(userList)-1] = nil           // Erase last element (write zero value)
	//userList = userList[:len(userList)-1]     // Truncate slice

	return nil
}

var ErrUserNotFound = fmt.Errorf("User not found")

func findUser(id int) (*User, int, error) {
	for i, u := range userList {
		if u.Id == id {
			return u, i, nil
		}
	}

	return nil, -1, ErrUserNotFound
}

func getNextID() int {
	lu := userList[len(userList)-1]
	return lu.Id + 1
}

// userList is a hard coded list of users for this
// example data source
var userList = []*User{
	&User{
		Id:           1,
		Href:         "1",
		Status:       "A",
		CreationDate: time.Now().UTC(),
		LastUpdate:   time.Now().UTC(),
		FromDate:     time.Now().UTC(),
		ToDate:       time.Now().UTC(),
		NamePrefix:   "Mr.",
		GivenName:    "Peter",
		MiddleName:   "",
		FamilyName:   "Ivanov",
		Nickname:     "ivapet",
		EMailAddress: "ivapet56876@gmail.comQ",
		WorkPhone:    "",
		PrivatePhone: "",
		WebHomePage:  "",
	},
	&User{
		Id:           2,
		Href:         "2",
		Status:       "A",
		CreationDate: time.Now().UTC(),
		LastUpdate:   time.Now().UTC(),
		FromDate:     time.Now().UTC(),
		ToDate:       time.Now().UTC(),
		NamePrefix:   "Mrs.",
		GivenName:    "Ana",
		MiddleName:   "",
		FamilyName:   "Ivanova",
		Nickname:     "ivaana",
		EMailAddress: "ivaana56876@gmail.comQ",
		WorkPhone:    "",
		PrivatePhone: "",
		WebHomePage:  "",
	},
}
